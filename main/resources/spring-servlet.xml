<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <description>Spring MVC Configuration</description>

    <!-- 加载配置属性文件 -->
    <import resource="application-property.xml"/>

    <!-- 使用Annotation自动注册Bean,只扫描@Controller -->
    <context:component-scan base-package="cn.jely.cd" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
            <!--<ref bean="mappingJacksonHttpMessageConverter"/>-->
            <!-- 使用XML格式输出数据 -->
            <!--<bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">-->
            <!--<property name="marshaller" ref="jaxbMarshaller" />-->
            <!--<property name="unmarshaller" ref="jaxbMarshaller" />-->
            <!--<property name="supportedMediaTypes">-->
            <!--<list>-->
            <!--<value>text/xml;charset=UTF-8</value>-->
            <!--<value>application/xml;charset=UTF-8</value>-->
            <!--</list>-->
            <!--</property>-->
            <!--</bean>-->
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />-->
    <!--<bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">-->
    <!--<property name="classesToBeBound">-->
    <!--<list>-->
    <!--<value>cn.jely.cd.domain.InfoModel</value>-->
    <!--<value>cn.jely.cd.util.ActionJsonResult</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->
    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <map>
                <entry key="xml" value="application/xml"/>
                <entry key="json" value="application/json"/>
            </map>
        </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
    </bean>

    <!-- 定义视图文件解析 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="${web.view.prefix}"/>
        <property name="suffix" value="${web.view.suffix}"/>
    </bean>
    <!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
    <mvc:default-servlet-handler/>

    <!-- 定义无Controller的path<->view直接映射 -->
    <!--<mvc:view-controller path="/" view-name="redirect:${web.view.index}/"/>-->

    <aop:config proxy-target-class="true"/>
    <aop:aspectj-autoproxy/>
    <!--&lt;!&ndash; 支持Shiro对Controller的方法级AOP安全控制 begin&ndash;&gt;-->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">-->
    <!--<property name="proxyTargetClass" value="true" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 保证实现了Shiro内部lifecycle函数的bean执行 &ndash;&gt;-->
    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->

    <!--<bean id="mappingJacksonHttpMessageConverter"-->
          <!--class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">-->
        <!--<property name="supportedMediaTypes">-->
            <!--<list>-->
                <!--<value>application/json;charset=UTF-8</value>-->
                <!--<value>text/html;charset=UTF-8</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="prettyPrint" value="false"/>-->
    <!--</bean>-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
        <property name="defaultErrorView" value="error"></property>
        <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
        <property name="exceptionAttribute" value="ex"></property>
        <!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
        <property name="exceptionMappings">
            <props>
                <prop key="cn.jely.cd.exception.BusinessException">error-business</prop>
                <prop key="java.security.InvalidParameterException">error-parameter</prop>

                <!-- 这里还可以继续扩展对不同异常类型的处理 -->
            </props>
        </property>
    </bean>
    <!--<bean	class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
    <!--<property name="webBindingInitializer">-->
    <!--<bean class="cn.jely.cd.web.common.BindingInitializer" />-->
    <!--</property>-->
    <!--<property name="messageConverters">-->
    <!--<list>-->
    <!--<bean	class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />-->
    <!--&lt;!&ndash; JSON转换器无需设置mediaType,由外部客户端调用时，手动设置相关mediaType &ndash;&gt;-->
    <!--<ref bean="mappingJacksonHttpMessageConverter"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--<property name="customArgumentResolvers">-->
    <!--<list>-->
    <!--<bean class="cn.jely.cd.web.common.PageArgumentResolver" />-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->
</beans>